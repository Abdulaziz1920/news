@use "sass:math";

// Подключение миксинов ===========================================================================================================================================================================================================================================================================
@mixin flexboxinline() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: inline-flex;
  font-size: 0;
}
@mixin anim($time, $delay) {
  -webkit-transition: all $time ease $delay;
  -moz-transition: all $time ease $delay;
  -ms-transition: all $time ease $delay;
  -o-transition: all $time ease $delay;
}
@mixin flexorder($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  font-size: 0;
}
// Подключение миксинов ===========================================================================================================================================================================================================================================================================

//&display=swap - добавить при подключении через плагин
//&subset=cyrillic -exit - добавление кириллицы
// @import "fonts";
@import url("https://fonts.googleapis.com/css?family=Roboto:100,100italic,300,300italic,regular,italic,500,500italic,700,700italic,900,900italic");
// Подключение шрифтов ===========================================================================================================================================================================================================================================================================
$fontFamily: "Roboto";
// Шрифт по умолчанию ==============================================================================================================================================================================================================================================================================
$fontSize: rem(14); // где 14(px) - размер шрифта по умолчанию из макета
// Шрифт по умолчанию ==============================================================================================================================================================================================================================================================================

// Переменные ===============================================================================================================================================================================================================================================================================================
// Минимальная ширина страницы
$minWidth: 320px; // Минимальная ширина страницы

// Ширина полотна (макета)
$maxWidth: 1920px;
// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1560px;
// Общий отступ у контейнера
// (30 = по 15px слева и справа, 0 = нет отступа)
$containerPadding: 15px;

// Ширина срабатывания первого брейкпоинта
$containerWidth: $maxWidthContainer + $containerPadding;

// Основные цвета
$mainColor: #fff; // Цвет шрифта по умолчанию

// Брейк-поинты
$pc: em(
  $containerWidth
); // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$tablet: em(991.98); // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: em(767.98); // Телефоны L
$mobileSmall: em(479.98); // Телефоны S

// Тип адаптива:
// 1 = отзывчивость (у контейнера нет брейкпоинтов),
// 2 = по брейк-поинтам (контейнер меняет свою ширину по брейк-поинтам)
$responsiveType: 1;

.container {
  max-width: $maxWidthContainer;
  margin: 0 auto;
  padding: $containerPadding;
}
// Обнуление и общие параметры ============================================================================================================================================================================================== =============================================================================================== ===============================================================================================

//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url("../fonts/#{$file_name}.woff2") format("woff2"),
      url("../fonts/#{$file_name}.woff") format("woff");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}
//Percent
@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}
//REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}
//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}
//Адаптивное свойство

//Currency
@mixin currency($sym) {
  &::after {
    content: "#{$sym}";
  }
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $keepSize: 0
) {
  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }
  @if ($minSize <= 0) {
    $minSize: 0.0001;
  }
  @if ($startSize <= 0) {
    $startSize: 0.0001;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  $flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

  // Получение значения свойства
  $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
  // Если отрицательные значения
  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp("
      rem($startSize)
      ","
      $flyValue
      ","
      rem($minSize)
      ")"};
  }

  @if $widthFrom ==
    $containerWidth or
    $widthFrom ==
    $maxWidth or
    $keepSize ==
    1 or
    $keepSize ==
    2
  {
    @media (min-width: $widthFromMedia) {
      #{$property}: rem($startSize);
    }
  }
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    // Если поддерживается clamp();
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }
    // Если не поддерживается clamp();
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div(
            $widthFrom,
            16
          ) - math.div($widthTo, 16)}
      );
    }
  }
  @if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: rem($minSize);
    }
  }
}

@mixin adaptiv-font($pcSize, $mobSize) {
  $addSize: $pcSize - $mobSize;
  $maxWidth: $maxWidth - 320;
  font-size: calc(
    #{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth})
  );
}
